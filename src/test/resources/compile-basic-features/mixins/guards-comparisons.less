.mixin(...) {
 catch:all;
}
.mixin(@var) when (@var=-0) {
  declare: minus 0;
}
.mixin(@var) when (@var=0) {
  declare: 0;
}
.mixin(@var) when (@var=-2) {
  declare: -2;
}
.mixin(@var) when (@var=-4) {
  declare: -4;
}
.mixin(@var) when (@var=4) {
  declare: 4;
}
.mixin(@var) when (@var=4px) {
  declare: 4px;
}
.mixin(@var) when (@var=-4px) {
  declare: minus 4px;
}
.mixin(@var) when (@var=4%) {
  declare: 4%;
}
.mixin(@var) when (@var=-4%) {
  declare: minus 4%;
}
.mixin(@var) when (isnumber(@var)) and (@var<5) {
  less-then: 5;
}
.mixin(@var) when (isnumber(@var)) and (@var>-5) {
  more-then: -5;
}
.mixin(@var) when (isnumber(@var)) and (@var<5px) {
  less-then: 5px;
}
.mixin(@var) when (isnumber(@var)) and (@var>-5px) {
  more-then: minus 5px;
}
.mixin(@var) when (isnumber(@var)) and (@var<5%) {
  less-then: 5%;
}
.mixin(@var) when (isnumber(@var)) and (@var>=-5%) {
  more-then: minus 5%;
}
.mixin(@var) when (isnumber(@var)) and (@var<3) {
  less-then: 3;
}
.mixin(@var) when (isnumber(@var)) and (@var>-3) {
  more-then: -3;
}
.mixin(@var) when (isnumber(@var)) and (@var<3px) {
  less-then: 3px;
}
.mixin(@var) when (isnumber(@var)) and (@var>-3px) {
  more-then: minus 3px;
}
.mixin(@var) when (isnumber(@var)) and (@var<3%) {
  less-then: 3%;
}
.mixin(@var) when (isnumber(@var)) and (@var>=-3%) {
  more-then: minus 3%;
}
.mixin(@var) when (@var=identifier) {
  declare: identifier;
}
.mixin(@var) when (@var=-identifier) {
  declare: minus identifier;
}
#tryZero {
  .mixin(0);
}
#tryMinusZero {
  .mixin(-0);
}
#tryNegatedNumber {
  .mixin(-4); 
}
#tryNumber {
  .mixin(4);
}
#tryNumberPx {
  .mixin(4px);
}
#tryNumberMinuxPx {
  .mixin(-4px);
}
#tryNumberPercentage {
  .mixin(4%);
}
#tryNumberMinuxPercentage {
  .mixin(-4%);
}
#tryString1 {
  .mixin('value');
}
#tryString2 {
  .mixin("value");
}
#tryIdentifier {
  .mixin(identifier);
}
#tryNegativeIdentifier {
  .mixin(-identifier);
}
#tryColor1 {
  .mixin(red);
}
#tryColor2 {
  .mixin(#ff0000);
}

.stringguard(@str, @id) when (@str = "theme1")					{ content: @id is theme1; }
.stringguard(@str, @id) when not ("theme2" = @str)				{ content: @id is not theme2; }
.stringguard(@str, @id) when (~"theme1" = @str)					{ content: @id is theme1 no quotes; }
.stringguard(@str, @id)											{}

.stringguard(@str, @id) when ("theme1" = @str)					{ reversed-content: @id is theme1; }
.stringguard(@str, @id) when not (@str = "theme2")				{ reversed-content: @id is not theme2; }
.stringguard(@str, @id) when (@str = ~"theme1")					{ reversed-content: @id is theme1 no quotes; }


.stringguardtest {
    .stringguard("theme1", 1);
	.stringguard("theme2", 2);
	.stringguard(theme1, 3);
}

// ignore form when comparing colors
.isEqual(@one, @two) when (@one = @two) {
  was-equal: equal;
}

.guard-short-vs-long-1 {
   @short: #123;
   @long: #112233;
  .isEqual(@short, @long);
}

.guard-short-vs-long-2 {
   @short: #123;
   @long: #112233;
  .isEqual(@long, @short);
}

.guard-named-vs-nonnamed-1 {
   @short: aqua;
   @long: #00ffff;
  .isEqual(@short, @long);
}

.guard-named-vs-nonnamed-2 {
   @short: aqua;
   @long: #00ffff;
  .isEqual(@long, @short);
}

.guard-short-vs-named-1 {
   @short: #0ff;
   @long: aqua;
  .isEqual(@short, @long);
}

.guard-short-vs-named-2 {
   @short: #0ff;
   @long: aqua;
  .isEqual(@long, @short);
}
 