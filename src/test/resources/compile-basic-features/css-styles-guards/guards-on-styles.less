@usedScope: global;
//style guards placed on top
.onTop > .direct + .guarded:true when (@usedScope=global){
  guarded-true: outer available;
  nested { guarded-true: inner available;}
}
.onTop > .direct + .guarded:false when (@usedScope=wrong){
  guarded-false: outer available;
  nested { guarded-false: inner available;}
}

//style guards nested in something - using local scope variables
.outer {
  + .false[type=1] when (@usedScope=global){
    used-local-scope: incorrectly;
  }
  + .true[type=2] when (@usedScope=local){
    used-local-scope: correctly;
  }
  @usedScope: local; 
}

//define mixin to bring guarded css into whatever
.mixin() {
  .false no argument global[type=1] when (@usedScope=global){
    used-local-scope: incorrectly;
  }
  .true no argument mixin[type=2] when (@usedScope=mixin){
    used-local-scope: correctly;
  }
  .false no argument local::pseudo when (@usedScope=local){
    used-local-scope: incorrectly;
  }
  @usedScope: mixin; 
}

.mixin() {
  .it .depends global[type=1] when (@usedScope=global){
    used-scope: global;
  }
  .it .depends mixin[type=2] when (@usedScope=mixin){
    used-scope: mixin;
  }
  .it .depends local::pseudo when (@usedScope=local){
    used-scope: local;
  }
}

.mixin(@usedScope: argument) {
  .false with argument global[type=1] when (@usedScope=global){
    used-argument-scope: incorrectly;
  }
  .true with argument argument[type=2] when (@usedScope=argument){
    used-argument-scope: correctly;
  }
  .false with argument local::pseudo when (@usedScope=local){
    used-argument-scope: incorrectly;
  }
   
}

//call mixin on top
.mixin();

//call mixin in nested ruleset
.outer1 {
	.outer2& {
	  .mixin();
	}
}

//call mixin but redefine variable in caller
.caller() {
  .caller global[type=1] when (@caller=global){
    used-scope: incorrectly;
  }
  .caller mixin[type=2] when (@caller=caller){
    used-scope: correctly;
  }
}
.local-in-caller {
  .caller();
  @caller: caller;
}

//as namespace

//guard on selector ending with appender https://github.com/SomMeri/less4j/issues/283
@my-option: true;

.test-1 {
  .h1& when (@my-option = false) {
    button {
      color: white;
    }
  }
}

.guard-after-appender {
  & when (@my-option = true) {
    button {
      color: green;
    }
  }
}