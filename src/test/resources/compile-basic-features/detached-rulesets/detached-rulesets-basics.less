@one-rule: { background: red; };
@ruleset: { .selector { background: green; } };
@ruleset-second: { .selector { size: 2; } };
@media-var: { @media (min-width: 1200) { .selector { padding: 0; }} };

@empty: {};
 
//call on top
@ruleset();
@empty();
@media-var();

//call from ruleset
.call-with-parentheses {
	@empty();
    @one-rule(); 
    @ruleset();
    @media-var();
}

//call from media
@media screen {
    @empty();
    @ruleset();
    @media-var();
}

.outer {
	@media screen {
    	@empty();
    	@one-rule(); 
    	@ruleset();
    	@media-var();
	}
}

//mixin arguments
.mixin-with-arguments-enclosure {
	.mixin(@parameter) {
  		@parameter();
	}

	.custom-mixin-argument {
		.mixin({custom: custom;});
	}
}

//scope - see caller
.see-caller {
	@detached-ruleset: {
	  caller-variable: @variable;
  	 .mixin();
	};

	use-place {
  		@detached-ruleset();

  		//define variable and mixin
  		@variable: value;
  		.mixin() {
    			position: caller;
  		}
	}
}

//scope - local win
.see-caller-local-win {
	@detached-ruleset: {
	  caller-variable: @variable;
  	 .mixin();
	};

	@variable: declaration;
	.mixin() {
		variable: declaration;
	}

	use-place {
  		@detached-ruleset();

  		//define variable and mixin
  		@variable: value;
  		.mixin() {
    			position: caller;
  		}
	}
}
//scope - called mixin sees things from detached
.see-caller-caller {
	@detached-ruleset: {
	  @variable: in detached;
  	 .mixin();
     .in-detached() {
            sees: me;
     }
	};

	use-place {
  		@detached-ruleset();

  		//define variable and mixin
  		.mixin() {
    			position: @variable;
            	.in-detached();
  		}
	}
}

//detached with mixin
@with-mixin-default: {
  .mixin(@parameter: default) {
    property: @parameter;
  }
  .default {
  	.mixin();
  }
  .custom {
  	.mixin(custom);
  }
};
@with-mixin-default();

@global-default: global default;
@with-mixin-global-default: {
  .mixin(@parameter: @global-default) {
    property: @parameter;
  }
  .default {
  	.mixin();
  }
  .custom {
  	.mixin(custom);
  }
};
@with-mixin-global-default();

@with-mixin-caller-default: {
	.mixin(@parameter: @caller-default) {
	  property-in-caller: @parameter;
	}
	.default {
		.mixin();
	}
	.custom {
		.mixin(custom);
	}
};
@with-mixin-caller-default-overwritten: {
	 @caller-default:overwritten;
	.mixin(@parameter: @caller-default) {
	  property-overwritten: @parameter;
	}
	.default {
		.mixin();
	}
};
.caller {
	@caller-default: caller;
	@with-mixin-caller-default();
	@with-mixin-caller-default-overwritten();
}

//unlock mixin see things defined in his scope first
@with-mixin-unlocking: {
	.mixin() {
	  value: @value;
	}
	@value: in detached;
};
.caller {
	@value: caller;
	@with-mixin-unlocking();
	.mixin();
}

//detached returned from mixin
.return-detached() {
  @color: #aabbcc;
  @detached: {color: @color;};
}
.selector-indirect {
  .return-detached();
  @detached();
}

//mixin called from detached ruleset
#mixin-called-from-detached-ruleset { 
  .wrap-mixin(@ruleset) {
    .wrap-selector {
        @d: visible;
        @ruleset();
    }
  };
	
  .mixin() {
    abusing: less;
  }

  .wrap-mixin({
    two: @d;
    .mixin();
  });
}
//unlocked ruleset sees callers scope
.unlocked-ruleset-sees-callers-scope {
  .mixin() {
    @detached: { scope: @see-here; };
  }
  .selector {
    @see-here: yes;
    .nested {
      .mixin();
      @detached();
    }
  }
}
//combining unlocking of mixins and detached
.combining-unlocking-of-mixins-and-detached {
  .mixin() {
    @detached: { scope-detached: @see-here; };
    .nested() {
      scope-mixin: @see-here; 
    }
  }
  .definer-wrapper() {
    @see-here: yes;
    .mixin();
  }
  .selector {
    .definer-wrapper();
    @detached();
    .nested();
  }	
}
//variable references chain
.variable-references-chain {
  @zero: visible;
  @detached-1: { scope-detached: @zero @one; };
  .one {
    @detached-2: @detached-1;
    @one: visible;
  }

  .usePlace {
    .one(); 
    @detached-2();
  }
}