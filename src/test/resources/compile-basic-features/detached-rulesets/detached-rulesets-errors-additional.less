//does not exists
.does-not-exists {
	@does-not-exists();
}
//wrong datatype
@wrongDatatype: "this is not ruleset";
.wrong-datatype {
  @wrongDatatype();
}
//attempt to interpolate
@detached: { color: blue; };
.selector {
  interpolation: "@{detached}";
}
//calling before unlocking
.calling-before-unlocking-mixin() {
  @unlocked-detached: { extreme: simplicity; };
}
.selector {
  @unlocked-detached();
  .calling-before-unlocking-mixin();
}
//do not return variables
.do-not-return-variables {
  @detached-ruleset: { 
    @color:blue; //variable will be returned
  };
  .caller {
    @detached-ruleset();
    color: @color; 
  }
}
//variable references chain - do not bundle scope in
.variable-references-chain {
  @zero: visible;
  @detached-1: { scope-detached: @zero @one @two @three; };
  .one {
    @detached-2: @detached-1;
    @one: visible;
    .two {
      @detached-3: @detached-2;
      @two: visible;
      .three {
        @three: visible;
        @detached-4: @detached-3;
      }
    }
  }

  .usePlace {
    .one > .two > .three(); 
    @detached-4();
  }
}