// various combinations of nested or, and, paranthesis and negation
.parenthesisNot(@value) when ((((@value)))) {
  parenthesisNot: just-value;
}
.parenthesisNot(@value) when (((not(@value)))) {
  parenthesisNot: negated once inside;
}
.parenthesisNot(@value) when not((((@value)))) {
  parenthesisNot: negated once outside;
}
.parenthesisNot(@value) when ((not((@value)))) {
  parenthesisNot: negated once middle;
}
.parenthesisNot(@value) when not(((not(@value)))) {
  parenthesisNot: negated twice 1;
}
.parenthesisNot(@value) when (not((not(@value)))) {
  parenthesisNot: negated twice 2;
}
.parenthesisNot(@value) when ((not(not(@value)))) {
  parenthesisNot: negated twice 3;
}
.parenthesisNot (...) when (default()) {
  parenthesisNot: none matched;
}

#parenthesisNot-true {
  .parenthesisNot(true);
}
#parenthesisNot-false {
  .parenthesisNot(false);
}

.orderOfEvaluation(@a1, @a2, @a3) when ((@a1) and (@a2) or (@a3)) {
  no-parenthesis: evaluated true 1a;
}
.orderOfEvaluation(@a1, @a2, @a3) when ((@a3) or (@a1) and (@a2)) {
  no-parenthesis: evaluated true 1b;
}
.orderOfEvaluation(@a1, @a2, @a3) when ((@a1) and ((@a2) or (@a3))) {
  no-parenthesis: evaluated true 1c;
}
.orderOfEvaluation(@a1, @a2, @a3) when (@a3), (@a1) and (@a2) {
  no-parenthesis: evaluated true 1d;
}
.orderOfEvaluation(@a1, @a2, @a3) when (((@a3) or (@a1)) and (@a2)) {
  no-parenthesis: evaluated true 1e;
}
.orderOfEvaluation(@a1, @a2, @a3) when ((@a1) and (@a2) or not (@a3)) {
  no-parenthesis: evaluated true 2a;
}
.orderOfEvaluation(@a1, @a2, @a3) when (not (@a3) or (@a1) and (@a2)) {
  no-parenthesis: evaluated true 2b;
}
.orderOfEvaluation(@a1, @a2, @a3) when not (@a3), (@a1) and (@a2) {
  no-parenthesis: evaluated true 2c;
}
.orderOfEvaluation(@a1, @a2, @a3) when (not (@a1) and (@a2) or (@a3)) {
  no-parenthesis: evaluated true 3;
}
.orderOfEvaluation(@a1, @a2, @a3) when ((((@a1) and (@a2) or (@a3)))) {
  no-parenthesis: evaluated true 4;
}
.orderOfEvaluation(@a1, @a2, @a3) when (((@a1) and (@a2)) or (@a3)) {
  with-parenthesis: evaluated true;
}
.orderOfEvaluation(...) when (default()) {
  orderOfEvaluation: evaluated false;
}
#orderOfEvaluation-false-false-true {
  .orderOfEvaluation(false, false, true);
}
#orderOfEvaluation-false-false-false {
  .orderOfEvaluation(false, false, false);
}
#orderOfEvaluation-true-true-false {
  .orderOfEvaluation(true, true, false);
}